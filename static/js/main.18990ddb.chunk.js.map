{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","axios/axios.js","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","reportWebVitals.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","axios","create","baseURL","fetchData","a","country","countryEndpoint","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","App","state","handleCountrychange","fetchedData","console","log","setState","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18990ddb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\n\nimport cx from 'classnames';\nimport styles from './Cards.module.css';\n\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\n    if (!confirmed) {\n        return 'Loading...'\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify='center'>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color='textSecondary'> { new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color='textSecondary'> { new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recovered people of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color='textSecondary'> { new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://covid19.mathdro.id/api\",\n});\n","import axios from '../axios/axios';\n\nexport const fetchData = async (country = '') => {\n    const countryEndpoint = country?`countries/${country}`:'';\n    try {\n        const {\n          data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(countryEndpoint);\n\n        const modifiedData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate\n        }\n\n        return modifiedData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get('/daily');\n        \n        const modifiedData = data.map(dailyData => {\n            return {\n                confirmed: dailyData.confirmed.total,\n                deaths: dailyData.deaths.total,\n                date: dailyData.reportDate\n            };\n        })\n        return modifiedData;\n        \n    } catch (error) {\n        \n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data:{countries}} = await axios.get('/countries');\n        return countries.map(country=>country.name);\n    } catch (error) {\n        \n    }\n}","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css'\n\nconst Chart = ({data:{confirmed,recovered,deaths}, country}) => {\n    const [dailyData, setDailyData] = useState({});\n    \n    useEffect(() => {\n        const fetchAPI = async () => {\n            const dailyData = await fetchDailyData();\n            setDailyData(dailyData);\n        }\n        fetchAPI();\n        //console.log(dailyData);\n    },[])\n\n    const lineChart =(\n            dailyData.length ? <Line\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [{\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true\n                    }, {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'rgba(255,0,0,0.5)',\n                        fill: true\n                    }]\n                }}\n            /> : null\n        )\n\n    const barChart = (\n        confirmed\n            ? (\n                <Bar\n                    data={{\n                        labels: ['Infected', 'Recovered', 'Deaths'],\n                        datasets: [\n                            {\n                                label: 'people',\n                                backgroundColor: [\n                                    'rgba(0, 0, 255, 0.5)',\n                                    'rgba(0, 255, 0, 0.5)',\n                                    'rgba(255, 0, 0, 0.5)'\n                                ],\n                                data: [confirmed.value,recovered.value, deaths.value]\n                            }\n                        ]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        title: {display:true, text:`Current state in ${country}`},\n                        \n                    }}\n                />\n        ): null\n    )\n    \n    return (\n        <div className={styles.container}>\n            {country? barChart :lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React,{useState, useEffect} from 'react';\nimport { NativeSelect,FormControl } from '@material-ui/core';\n\nimport { fetchCountries } from '../../api'\nimport styles from './CountryPicker.module.css'\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([])\n    useEffect(() => {\n        const fetchAPI = async () => {\n            const countries = await fetchCountries();\n            setFetchedCountries(countries);\n        }\n        fetchAPI();\n    },[])\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue='' onChange={e => handleCountryChange(e.target.value)}>\n                <option  value=''>Global</option>\n                {fetchedCountries.map((country) => <option key={country} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from \"react\";\n\n// import axios from \"./axios/axios\";\nimport styles from './App.module.css';\nimport {Cards, Chart, CountryPicker} from './components'\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png'\nclass App extends React.Component{\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountrychange = async (country) => {\n    //console.log(country)\n    \n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({ data: fetchedData, country: country });\n  }\n\n  render() {\n    const { data,country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={ coronaImage} alt='COVID-19'/>\n        <Cards data={ data}/>\n        <CountryPicker handleCountryChange ={this.handleCountrychange} />\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}